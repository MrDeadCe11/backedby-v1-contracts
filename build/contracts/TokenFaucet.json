{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/home/john/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC20/ERC20.sol",
    "2": "/home/john/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC20/IERC20.sol",
    "21": "contracts/utils/TokenFaucet.sol",
    "3": "/home/john/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "4": "/home/john/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/utils/TokenFaucet.sol",
    "exportedSymbols": {
      "Context": [
        4640
      ],
      "ERC20": [
        4618
      ],
      "IERC20": [
        3908
      ],
      "IERC20Metadata": [
        4665
      ],
      "TestUsd": [
        3713
      ],
      "TokenFaucet": [
        3756
      ]
    },
    "id": 3757,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3683,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:21"
      },
      {
        "absolutePath": "/home/john/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 3684,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3757,
        "sourceUnit": 4619,
        "src": "58:55:21",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3685,
              "name": "ERC20",
              "nameLocations": [
                "135:5:21"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4618,
              "src": "135:5:21"
            },
            "id": 3686,
            "nodeType": "InheritanceSpecifier",
            "src": "135:5:21"
          }
        ],
        "canonicalName": "TestUsd",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 3713,
        "linearizedBaseContracts": [
          3713,
          4618,
          4665,
          3908,
          4640
        ],
        "name": "TestUsd",
        "nameLocation": "124:7:21",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3711,
              "nodeType": "Block",
              "src": "225:55:21",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 3698,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "241:3:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3699,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "245:6:21",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "241:10:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000000000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000000000000000"
                        },
                        "id": 3708,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000000000_by_1",
                                "typeString": "int_const 1000000000000"
                              },
                              "id": 3702,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 3700,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "254:2:21",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3132",
                                "id": 3701,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "258:2:21",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_12_by_1",
                                  "typeString": "int_const 12"
                                },
                                "value": "12"
                              },
                              "src": "254:6:21",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000_by_1",
                                "typeString": "int_const 1000000000000"
                              }
                            }
                          ],
                          "id": 3703,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "253:8:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000_by_1",
                            "typeString": "int_const 1000000000000"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              },
                              "id": 3706,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 3704,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "265:2:21",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3138",
                                "id": 3705,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "269:2:21",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_18_by_1",
                                  "typeString": "int_const 18"
                                },
                                "value": "18"
                              },
                              "src": "265:6:21",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              }
                            }
                          ],
                          "id": 3707,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "264:8:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          }
                        },
                        "src": "253:19:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000000000000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000000000000000"
                        }
                      ],
                      "id": 3697,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4435,
                      "src": "235:5:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "235:38:21",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3710,
                  "nodeType": "ExpressionStatement",
                  "src": "235:38:21"
                }
              ]
            },
            "id": 3712,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 3693,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3688,
                    "src": "210:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 3694,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3690,
                    "src": "216:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 3695,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 3692,
                  "name": "ERC20",
                  "nameLocations": [
                    "204:5:21"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4618,
                  "src": "204:5:21"
                },
                "nodeType": "ModifierInvocation",
                "src": "204:20:21"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3691,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3688,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "174:5:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3712,
                  "src": "160:19:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3687,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "160:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3690,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "195:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3712,
                  "src": "181:21:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3689,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "181:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "159:44:21"
            },
            "returnParameters": {
              "id": 3696,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "225:0:21"
            },
            "scope": 3713,
            "src": "147:133:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 3757,
        "src": "115:167:21",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "TokenFaucet",
        "contractDependencies": [
          3713
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 3756,
        "linearizedBaseContracts": [
          3756
        ],
        "name": "TokenFaucet",
        "nameLocation": "293:11:21",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3716,
            "mutability": "mutable",
            "name": "_token",
            "nameLocation": "326:6:21",
            "nodeType": "VariableDeclaration",
            "scope": 3756,
            "src": "311:21:21",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IERC20_$3908",
              "typeString": "contract IERC20"
            },
            "typeName": {
              "id": 3715,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 3714,
                "name": "IERC20",
                "nameLocations": [
                  "311:6:21"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3908,
                "src": "311:6:21"
              },
              "referencedDeclaration": 3908,
              "src": "311:6:21",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$3908",
                "typeString": "contract IERC20"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 3728,
              "nodeType": "Block",
              "src": "352:57:21",
              "statements": [
                {
                  "expression": {
                    "id": 3726,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 3719,
                      "name": "_token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3716,
                      "src": "362:6:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$3908",
                        "typeString": "contract IERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "5465737420555344",
                          "id": 3723,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "383:10:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_5677e9fba3f2bf6d7ca095d1751fc1e6a8ab6566c300684275d5d5f788b44223",
                            "typeString": "literal_string \"Test USD\""
                          },
                          "value": "Test USD"
                        },
                        {
                          "hexValue": "74555344",
                          "id": 3724,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "395:6:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_8087ca1dedb38359e09f6304bb4495847b829f98931b40400ca4607945df0cd9",
                            "typeString": "literal_string \"tUSD\""
                          },
                          "value": "tUSD"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_5677e9fba3f2bf6d7ca095d1751fc1e6a8ab6566c300684275d5d5f788b44223",
                            "typeString": "literal_string \"Test USD\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_8087ca1dedb38359e09f6304bb4495847b829f98931b40400ca4607945df0cd9",
                            "typeString": "literal_string \"tUSD\""
                          }
                        ],
                        "id": 3722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "371:11:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_contract$_TestUsd_$3713_$",
                          "typeString": "function (string memory,string memory) returns (contract TestUsd)"
                        },
                        "typeName": {
                          "id": 3721,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3720,
                            "name": "TestUsd",
                            "nameLocations": [
                              "375:7:21"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 3713,
                            "src": "375:7:21"
                          },
                          "referencedDeclaration": 3713,
                          "src": "375:7:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_TestUsd_$3713",
                            "typeString": "contract TestUsd"
                          }
                        }
                      },
                      "id": 3725,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "371:31:21",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_TestUsd_$3713",
                        "typeString": "contract TestUsd"
                      }
                    },
                    "src": "362:40:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$3908",
                      "typeString": "contract IERC20"
                    }
                  },
                  "id": 3727,
                  "nodeType": "ExpressionStatement",
                  "src": "362:40:21"
                }
              ]
            },
            "id": 3729,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3717,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "350:2:21"
            },
            "returnParameters": {
              "id": 3718,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "352:0:21"
            },
            "scope": 3756,
            "src": "339:70:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3739,
              "nodeType": "Block",
              "src": "470:39:21",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3736,
                        "name": "_token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3716,
                        "src": "495:6:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3908",
                          "typeString": "contract IERC20"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IERC20_$3908",
                          "typeString": "contract IERC20"
                        }
                      ],
                      "id": 3735,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "487:7:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 3734,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "487:7:21",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 3737,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "487:15:21",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 3733,
                  "id": 3738,
                  "nodeType": "Return",
                  "src": "480:22:21"
                }
              ]
            },
            "functionSelector": "9d76ea58",
            "id": 3740,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenAddress",
            "nameLocation": "424:12:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3730,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "436:2:21"
            },
            "returnParameters": {
              "id": 3733,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3732,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3740,
                  "src": "461:7:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3731,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "461:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "460:9:21"
            },
            "scope": 3756,
            "src": "415:94:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 3754,
              "nodeType": "Block",
              "src": "577:50:21",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3750,
                        "name": "receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3742,
                        "src": "603:8:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3751,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3744,
                        "src": "613:6:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 3747,
                        "name": "_token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3716,
                        "src": "587:6:21",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3908",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 3749,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "594:8:21",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3875,
                      "src": "587:15:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 3752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "587:33:21",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3753,
                  "nodeType": "ExpressionStatement",
                  "src": "587:33:21"
                }
              ]
            },
            "functionSelector": "2c512d6e",
            "id": 3755,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokens",
            "nameLocation": "524:9:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3742,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "542:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3755,
                  "src": "534:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3741,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "534:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3744,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "560:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3755,
                  "src": "552:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3743,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "552:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "533:34:21"
            },
            "returnParameters": {
              "id": 3746,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "577:0:21"
            },
            "scope": 3756,
            "src": "515:112:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3757,
        "src": "284:345:21",
        "usedErrors": []
      }
    ],
    "src": "32:597:21"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405161001d9061009a565b60408082526008908201526715195cdd081554d160c21b6060820152608060208201819052600490820152631d1554d160e21b60a082015260c001604051809103906000f080158015610074573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556100a7565b610ca78061023883390190565b610182806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632c512d6e1461003b5780639d76ea5814610050575b600080fd5b61004e6100493660046100eb565b61006f565b005b600054604080516001600160a01b039092168252519081900360200190f35b60005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156100c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e69190610123565b505050565b600080604083850312156100fe57600080fd5b82356001600160a01b038116811461011557600080fd5b946020939093013593505050565b60006020828403121561013557600080fd5b8151801515811461014557600080fd5b939250505056fea26469706673582212200e267e8c6b307cb6fa5b903f1ec864afb8b22bd8bf1bc0687571c74090d0201764736f6c6343000810003360806040523480156200001157600080fd5b5060405162000ca738038062000ca783398101604081905262000034916200022f565b8181600362000044838262000327565b50600462000053828262000327565b50505062000075336c0c9f2c9cd04674edea400000006200007d60201b60201c565b50506200041b565b6001600160a01b038216620000d85760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000ec9190620003f3565b90915550506001600160a01b038216600090815260208190526040812080548392906200011b908490620003f3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200019257600080fd5b81516001600160401b0380821115620001af57620001af6200016a565b604051601f8301601f19908116603f01168101908282118183101715620001da57620001da6200016a565b81604052838152602092508683858801011115620001f757600080fd5b600091505b838210156200021b5785820183015181830184015290820190620001fc565b600093810190920192909252949350505050565b600080604083850312156200024357600080fd5b82516001600160401b03808211156200025b57600080fd5b620002698683870162000180565b935060208501519150808211156200028057600080fd5b506200028f8582860162000180565b9150509250929050565b600181811c90821680620002ae57607f821691505b602082108103620002cf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200016557600081815260208120601f850160051c81016020861015620002fe5750805b601f850160051c820191505b818110156200031f578281556001016200030a565b505050505050565b81516001600160401b038111156200034357620003436200016a565b6200035b8162000354845462000299565b84620002d5565b602080601f8311600181146200039357600084156200037a5750858301515b600019600386901b1c1916600185901b1785556200031f565b600085815260208120601f198616915b82811015620003c457888601518255948401946001909101908401620003a3565b5085821015620003e35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200041557634e487b7160e01b600052601160045260246000fd5b92915050565b61087c806200042b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106c6565b60405180910390f35b6100df6100da366004610730565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461075a565b61024c565b604051601281526020016100c3565b6100df610131366004610730565b610270565b6100f3610144366004610796565b6001600160a01b031660009081526020819052604090205490565b6100b6610292565b6100df610175366004610730565b6102a1565b6100df610188366004610730565b610321565b6100f361019b3660046107b8565b61032f565b6060600380546101af906107eb565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107eb565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d9190610825565b61035a565b6060600480546101af906107eb565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260208190526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066d908490610825565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b991815260200190565b60405180910390a36104f2565b600060208083528351808285015260005b818110156106f3578581018301518582016040015282016106d7565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461072b57600080fd5b919050565b6000806040838503121561074357600080fd5b61074c83610714565b946020939093013593505050565b60008060006060848603121561076f57600080fd5b61077884610714565b925061078660208501610714565b9150604084013590509250925092565b6000602082840312156107a857600080fd5b6107b182610714565b9392505050565b600080604083850312156107cb57600080fd5b6107d483610714565b91506107e260208401610714565b90509250929050565b600181811c908216806107ff57607f821691505b60208210810361081f57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea2646970667358221220c77214cb7bfd0d389b7a150e45fccc96effbd29aab5f207d57dc45dbe4e6f45164736f6c63430008100033",
  "bytecodeSha1": "ab8011e32131dae426ba450517b489b4cf5ef36d",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.16+commit.07a7930e"
  },
  "contractName": "TokenFaucet",
  "coverageMap": {
    "branches": {
      "1": {},
      "2": {},
      "21": {},
      "3": {},
      "4": {}
    },
    "statements": {
      "1": {},
      "2": {},
      "21": {
        "TokenFaucet.getTokens": {
          "1": [
            587,
            620
          ]
        },
        "TokenFaucet.tokenAddress": {
          "0": [
            480,
            502
          ]
        }
      },
      "3": {},
      "4": {}
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.6.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/ERC20",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/IERC20Metadata",
    "TestUsd"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c80632c512d6e1461003b5780639d76ea5814610050575b600080fd5b61004e6100493660046100eb565b61006f565b005b600054604080516001600160a01b039092168252519081900360200190f35b60005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156100c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e69190610123565b505050565b600080604083850312156100fe57600080fd5b82356001600160a01b038116811461011557600080fd5b946020939093013593505050565b60006020828403121561013557600080fd5b8151801515811461014557600080fd5b939250505056fea26469706673582212200e267e8c6b307cb6fa5b903f1ec864afb8b22bd8bf1bc0687571c74090d0201764736f6c63430008100033",
  "deployedSourceMap": "284:345:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;515:112;;;;;;:::i;:::-;;:::i;:::-;;415:94;461:7;495:6;415:94;;;-1:-1:-1;;;;;495:6:21;;;519:51:23;;415:94:21;;;;;507:2:23;415:94:21;;;515:112;587:6;;:33;;-1:-1:-1;;;587:33:21;;-1:-1:-1;;;;;773:32:23;;;587:33:21;;;755:51:23;822:18;;;815:34;;;587:6:21;;;;:15;;728:18:23;;587:33:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;515:112;;:::o;14:354:23:-;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;185:23;;-1:-1:-1;;;;;237:31:23;;227:42;;217:70;;283:1;280;273:12;217:70;306:5;358:2;343:18;;;;330:32;;-1:-1:-1;;;14:354:23:o;860:277::-;927:6;980:2;968:9;959:7;955:23;951:32;948:52;;;996:1;993;986:12;948:52;1028:9;1022:16;1081:5;1074:13;1067:21;1060:5;1057:32;1047:60;;1103:1;1100;1093:12;1047:60;1126:5;860:277;-1:-1:-1;;;860:277:23:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    284,
    629
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2C512D6E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0x50 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0xEB JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x123 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0x26 PUSH31 0x8C6B307CB6FA5B903F1EC864AFB8B22BD8BF1BC0687571C74090D020176473 PUSH16 0x6C634300081000330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        284,
        629
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "5": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "CALLVALUE",
      "path": "21"
    },
    "6": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "DUP1",
      "path": "21"
    },
    "7": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "8": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "12": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "DUP1",
      "path": "21"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "REVERT",
      "path": "21"
    },
    "16": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "17": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "POP",
      "path": "21"
    },
    "18": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "CALLDATASIZE",
      "path": "21"
    },
    "21": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "LT",
      "path": "21"
    },
    "22": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x36"
    },
    "25": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "26": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "CALLDATALOAD",
      "path": "21"
    },
    "29": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "SHR",
      "path": "21"
    },
    "32": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "DUP1",
      "path": "21"
    },
    "33": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH4",
      "path": "21",
      "value": "0x2C512D6E"
    },
    "38": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "EQ",
      "path": "21"
    },
    "39": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x3B"
    },
    "42": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "43": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "DUP1",
      "path": "21"
    },
    "44": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH4",
      "path": "21",
      "value": "0x9D76EA58"
    },
    "49": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "EQ",
      "path": "21"
    },
    "50": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x50"
    },
    "53": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "54": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "55": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "57": {
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "DUP1",
      "path": "21"
    },
    "58": {
      "first_revert": true,
      "fn": null,
      "offset": [
        284,
        629
      ],
      "op": "REVERT",
      "path": "21"
    },
    "59": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "60": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x4E"
    },
    "63": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x49"
    },
    "66": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "CALLDATASIZE",
      "path": "21"
    },
    "67": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x4"
    },
    "69": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0xEB"
    },
    "72": {
      "fn": "TokenFaucet.getTokens",
      "jump": "i",
      "offset": [
        515,
        627
      ],
      "op": "JUMP",
      "path": "21"
    },
    "73": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "74": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x6F"
    },
    "77": {
      "fn": "TokenFaucet.getTokens",
      "jump": "i",
      "offset": [
        515,
        627
      ],
      "op": "JUMP",
      "path": "21"
    },
    "78": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "79": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "STOP",
      "path": "21"
    },
    "80": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "81": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        461,
        468
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "83": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        495,
        501
      ],
      "op": "SLOAD",
      "path": "21",
      "statement": 0
    },
    "84": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "86": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "DUP1",
      "path": "21"
    },
    "87": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "88": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "90": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "92": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "94": {
      "op": "SHL"
    },
    "95": {
      "op": "SUB"
    },
    "96": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        495,
        501
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "97": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        495,
        501
      ],
      "op": "SWAP3",
      "path": "21"
    },
    "98": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        495,
        501
      ],
      "op": "AND",
      "path": "21"
    },
    "99": {
      "op": "DUP3"
    },
    "100": {
      "op": "MSTORE"
    },
    "101": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "102": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "103": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "DUP2",
      "path": "21"
    },
    "104": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "105": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "SUB",
      "path": "21"
    },
    "106": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "108": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "ADD",
      "path": "21"
    },
    "109": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "110": {
      "fn": "TokenFaucet.tokenAddress",
      "offset": [
        415,
        509
      ],
      "op": "RETURN",
      "path": "21"
    },
    "111": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "112": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        593
      ],
      "op": "PUSH1",
      "path": "21",
      "statement": 1,
      "value": "0x0"
    },
    "114": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        593
      ],
      "op": "SLOAD",
      "path": "21"
    },
    "115": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "117": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "118": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "123": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "125": {
      "op": "SHL"
    },
    "126": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP2",
      "path": "21"
    },
    "127": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "128": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "130": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "132": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "134": {
      "op": "SHL"
    },
    "135": {
      "op": "SUB"
    },
    "136": {
      "op": "DUP5"
    },
    "137": {
      "op": "DUP2"
    },
    "138": {
      "op": "AND"
    },
    "139": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x4"
    },
    "141": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP4",
      "path": "21"
    },
    "142": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "ADD",
      "path": "21"
    },
    "143": {
      "op": "MSTORE"
    },
    "144": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "146": {
      "op": "DUP3"
    },
    "147": {
      "op": "ADD"
    },
    "148": {
      "op": "DUP5"
    },
    "149": {
      "op": "SWAP1"
    },
    "150": {
      "op": "MSTORE"
    },
    "151": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        593
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "152": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        593
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "153": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        593
      ],
      "op": "AND",
      "path": "21"
    },
    "154": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        593
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "155": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        602
      ],
      "op": "PUSH4",
      "path": "21",
      "value": "0xA9059CBB"
    },
    "160": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        602
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "161": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "163": {
      "op": "ADD"
    },
    "164": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x20"
    },
    "166": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "168": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "169": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP1",
      "path": "21"
    },
    "170": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP4",
      "path": "21"
    },
    "171": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "SUB",
      "path": "21"
    },
    "172": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP2",
      "path": "21"
    },
    "173": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "175": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP8",
      "path": "21"
    },
    "176": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "GAS",
      "path": "21"
    },
    "177": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "CALL",
      "path": "21"
    },
    "178": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "179": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP1",
      "path": "21"
    },
    "180": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "ISZERO",
      "path": "21"
    },
    "181": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0xC2"
    },
    "184": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "JUMPI",
      "path": "21"
    },
    "185": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "RETURNDATASIZE",
      "path": "21"
    },
    "186": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "188": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP1",
      "path": "21"
    },
    "189": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "RETURNDATACOPY",
      "path": "21"
    },
    "190": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "RETURNDATASIZE",
      "path": "21"
    },
    "191": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x0"
    },
    "193": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "REVERT",
      "path": "21"
    },
    "194": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "195": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "POP",
      "path": "21"
    },
    "196": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "POP",
      "path": "21"
    },
    "197": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "POP",
      "path": "21"
    },
    "198": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "POP",
      "path": "21"
    },
    "199": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "201": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "MLOAD",
      "path": "21"
    },
    "202": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "RETURNDATASIZE",
      "path": "21"
    },
    "203": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x1F"
    },
    "205": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "NOT",
      "path": "21"
    },
    "206": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x1F"
    },
    "208": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP3",
      "path": "21"
    },
    "209": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "ADD",
      "path": "21"
    },
    "210": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "AND",
      "path": "21"
    },
    "211": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP3",
      "path": "21"
    },
    "212": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "ADD",
      "path": "21"
    },
    "213": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP1",
      "path": "21"
    },
    "214": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH1",
      "path": "21",
      "value": "0x40"
    },
    "216": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "MSTORE",
      "path": "21"
    },
    "217": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "POP",
      "path": "21"
    },
    "218": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "DUP2",
      "path": "21"
    },
    "219": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "ADD",
      "path": "21"
    },
    "220": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "221": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0xE6"
    },
    "224": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "SWAP2",
      "path": "21"
    },
    "225": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "SWAP1",
      "path": "21"
    },
    "226": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "PUSH2",
      "path": "21",
      "value": "0x123"
    },
    "229": {
      "fn": "TokenFaucet.getTokens",
      "jump": "i",
      "offset": [
        587,
        620
      ],
      "op": "JUMP",
      "path": "21"
    },
    "230": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "JUMPDEST",
      "path": "21"
    },
    "231": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        587,
        620
      ],
      "op": "POP",
      "path": "21"
    },
    "232": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "POP",
      "path": "21"
    },
    "233": {
      "fn": "TokenFaucet.getTokens",
      "offset": [
        515,
        627
      ],
      "op": "POP",
      "path": "21"
    },
    "234": {
      "fn": "TokenFaucet.getTokens",
      "jump": "o",
      "offset": [
        515,
        627
      ],
      "op": "JUMP",
      "path": "21"
    },
    "235": {
      "op": "JUMPDEST"
    },
    "236": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "238": {
      "op": "DUP1"
    },
    "239": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "241": {
      "op": "DUP4"
    },
    "242": {
      "op": "DUP6"
    },
    "243": {
      "op": "SUB"
    },
    "244": {
      "op": "SLT"
    },
    "245": {
      "op": "ISZERO"
    },
    "246": {
      "op": "PUSH2",
      "value": "0xFE"
    },
    "249": {
      "op": "JUMPI"
    },
    "250": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "252": {
      "op": "DUP1"
    },
    "253": {
      "op": "REVERT"
    },
    "254": {
      "op": "JUMPDEST"
    },
    "255": {
      "op": "DUP3"
    },
    "256": {
      "op": "CALLDATALOAD"
    },
    "257": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "259": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "261": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "263": {
      "op": "SHL"
    },
    "264": {
      "op": "SUB"
    },
    "265": {
      "op": "DUP2"
    },
    "266": {
      "op": "AND"
    },
    "267": {
      "op": "DUP2"
    },
    "268": {
      "op": "EQ"
    },
    "269": {
      "op": "PUSH2",
      "value": "0x115"
    },
    "272": {
      "op": "JUMPI"
    },
    "273": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "275": {
      "op": "DUP1"
    },
    "276": {
      "op": "REVERT"
    },
    "277": {
      "op": "JUMPDEST"
    },
    "278": {
      "op": "SWAP5"
    },
    "279": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "281": {
      "op": "SWAP4"
    },
    "282": {
      "op": "SWAP1"
    },
    "283": {
      "op": "SWAP4"
    },
    "284": {
      "op": "ADD"
    },
    "285": {
      "op": "CALLDATALOAD"
    },
    "286": {
      "op": "SWAP4"
    },
    "287": {
      "op": "POP"
    },
    "288": {
      "op": "POP"
    },
    "289": {
      "op": "POP"
    },
    "290": {
      "jump": "o",
      "op": "JUMP"
    },
    "291": {
      "op": "JUMPDEST"
    },
    "292": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "294": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "296": {
      "op": "DUP3"
    },
    "297": {
      "op": "DUP5"
    },
    "298": {
      "op": "SUB"
    },
    "299": {
      "op": "SLT"
    },
    "300": {
      "op": "ISZERO"
    },
    "301": {
      "op": "PUSH2",
      "value": "0x135"
    },
    "304": {
      "op": "JUMPI"
    },
    "305": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "307": {
      "op": "DUP1"
    },
    "308": {
      "op": "REVERT"
    },
    "309": {
      "op": "JUMPDEST"
    },
    "310": {
      "op": "DUP2"
    },
    "311": {
      "op": "MLOAD"
    },
    "312": {
      "op": "DUP1"
    },
    "313": {
      "op": "ISZERO"
    },
    "314": {
      "op": "ISZERO"
    },
    "315": {
      "op": "DUP2"
    },
    "316": {
      "op": "EQ"
    },
    "317": {
      "op": "PUSH2",
      "value": "0x145"
    },
    "320": {
      "op": "JUMPI"
    },
    "321": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "323": {
      "op": "DUP1"
    },
    "324": {
      "op": "REVERT"
    },
    "325": {
      "op": "JUMPDEST"
    },
    "326": {
      "op": "SWAP4"
    },
    "327": {
      "op": "SWAP3"
    },
    "328": {
      "op": "POP"
    },
    "329": {
      "op": "POP"
    },
    "330": {
      "op": "POP"
    },
    "331": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "0159e2fcdf74fb7d2b3cab9a4702b414ecec172b",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestUsd is ERC20 {\n    constructor (string memory _name, string memory _symbol) ERC20(_name,_symbol) {\n        _mint(msg.sender, (10**12) * (10**18));\n    }\n}\n\ncontract TokenFaucet {\n    IERC20 private _token;\n\n    constructor(){\n        _token = new TestUsd(\"Test USD\", \"tUSD\");\n    }\n\n    function tokenAddress() external view returns(address) {\n        return address(_token);\n    }\n\n    function getTokens(address receiver, uint256 amount) external {\n        _token.transfer(receiver, amount);\n    }\n}",
  "sourceMap": "284:345:21:-:0;;;339:70;;;;;;;;;;371:31;;;;;:::i;:::-;317:2:23;299:21;;;356:1;336:18;;;329:29;-1:-1:-1;;;389:2:23;374:18;;367:38;443:3;436:4;421:20;;414:33;;;484:1;463:19;;;456:30;-1:-1:-1;;;517:3:23;502:19;;495:35;562:3;547:19;371:31:21;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;362:6:21;:40;;-1:-1:-1;;;;;;362:40:21;-1:-1:-1;;;;;362:40:21;;;;;;;;;;284:345;;;;;;;;;;:::o;14:558:23:-;284:345:21;;;;;;",
  "sourcePath": "contracts/utils/TokenFaucet.sol",
  "type": "contract"
}